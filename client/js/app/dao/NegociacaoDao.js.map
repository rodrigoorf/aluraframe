{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","console","log","e","target","result","onerror","error","onabort","oncomplete","cursor","openCursor","negociacoes","atual","dado","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AACT,uCAAYC,UAAZ,EAAuB;AAAA;;AACnB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAW;AAAA;;AAChB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,MAAKN,WAAL,CAAiBO,WAAjB,CAA6B,CAAC,MAAKN,MAAN,CAA7B,EAA4C,WAA5C,EAAyDO,WAAzD,CAAqE,MAAKP,MAA1E,EAAkFQ,GAAlF,CAAsFP,UAAtF,CAAd;AACAI,oCAAQI,SAAR,GAAoB,aAAK;AACrBN,wCAAQ,IAAR;AACAO,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,MAArB;AACH,6BAHD;AAIAT,oCAAQU,OAAR,GAAkB,aAAK;AACnBL,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASG,KAArB;AACAZ,uCAAO,yCAAP;AACH,6BAHD;AAIA;AACAC,oCAAQY,OAAR,GAAkB,aAAK;AACnBP,wCAAQC,GAAR,CAAY,aAAZ;AACAP,uCAAO,UAAP;AACH,6BAHD;AAIAC,oCAAQa,UAAR,GAAqB,aAAK;AACtBR,wCAAQC,GAAR,CAAY,UAAZ;AACH,6BAFD;AAGH,yBAlBM,CAAP;AAmBH;;;iDAEW;AAAA;;AACR,+BAAO,IAAIT,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIe,SAAS,OAAKpB,WAAL,CAAiBO,WAAjB,CAA6B,CAAC,OAAKN,MAAN,CAA7B,EAA4C,WAA5C,EAAyDO,WAAzD,CAAqE,OAAKP,MAA1E,EAAkFoB,UAAlF,EAAb;AACA,gCAAIC,cAAc,EAAlB;AACAF,mCAAOV,SAAP,GAAmB,aAAK;AACpB,oCAAIa,QAAQV,EAAEC,MAAF,CAASC,MAArB;AACA,oCAAGQ,KAAH,EAAS;AACL,wCAAIC,OAAOD,MAAME,KAAjB;AACAH,gDAAYI,IAAZ,CAAiB,IAAI7B,UAAJ,CAAe2B,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;AACAN,0CAAMO,QAAN;AACH,iCAJD,MAIO;AACH1B,4CAAQkB,WAAR;AACH;AACJ,6BATD;AAUAF,mCAAOJ,OAAP,GAAiB,aAAK;AAClBL,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASG,KAArB;AACAZ,uCAAO,wCAAP;AACH,6BAHD;AAIH,yBAjBM,CAAP;AAkBH;;;iDAEW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,OAAKN,WAAL,CAAiBO,WAAjB,CAA6B,CAAC,OAAKN,MAAN,CAA7B,EAA4C,WAA5C,EAAyDO,WAAzD,CAAqE,OAAKP,MAA1E,EAAkF8B,KAAlF,EAAd;AACAzB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,mCAAR,CAAL;AAAA,6BAApB;AACAE,oCAAQU,OAAR,GAAkB;AAAA,uCAAKX,OAAO,wCAAP,CAAL;AAAA,6BAAlB;AACH,yBAJM,CAAP;AAKH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoDao {\r\n    constructor(connection){\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao){\r\n        return new Promise((resolve, reject) => {\r\n            let request = this._connection.transaction([this._store], 'readwrite').objectStore(this._store).add(negociacao);\r\n            request.onsuccess = e => {\r\n                resolve('ok');\r\n                console.log(e.target.result);\r\n            };\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível adicionar a negociação');\r\n            };\r\n            //teste\r\n            request.onabort = e => {\r\n                console.log(\"Deu ruim :(\");\r\n                reject(\"Abortado\");\r\n            };\r\n            request.oncomplete = e => {\r\n                console.log(\"completo\");\r\n            }\r\n        });\r\n    }\r\n\r\n    listaTodos(){\r\n        return new Promise((resolve, reject) => {\r\n            let cursor = this._connection.transaction([this._store], 'readwrite').objectStore(this._store).openCursor();\r\n            let negociacoes = [];\r\n            cursor.onsuccess = e => {\r\n                let atual = e.target.result;\r\n                if(atual){\r\n                    let dado = atual.value;\r\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n                    atual.continue();\r\n                } else {\r\n                    resolve(negociacoes);\r\n                }\r\n            };\r\n            cursor.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível listar as negociações');\r\n            }\r\n        })\r\n    }\r\n\r\n    apagaTodos(){\r\n        return new Promise((resolve, reject) => {\r\n            let request = this._connection.transaction([this._store], 'readwrite').objectStore(this._store).clear();\r\n            request.onsuccess = e => resolve('Negociações removidas com sucesso');\r\n            request.onerror = e => reject('Não foi possível apagar as negociações');\r\n        })\r\n    }\r\n}"]}